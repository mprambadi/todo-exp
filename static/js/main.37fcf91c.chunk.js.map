{"version":3,"sources":["component/TodoItemContent.js","component/TodoItemStatus.js","component/TodoItem.js","component/Todo.js","component/TodoList.js","component/TodoStatus.js","App.js","serviceWorker.js","index.js"],"names":["TodoItemContent","_ref","_ref$item","item","edit","name","status","id","updateToDo","react_default","a","createElement","Fragment","value","onChange","_ref2","target","onBlur","onKeyPress","_ref3","key","autoFocus","style","textDecorationLine","className","concat","onDoubleClick","TodoItemStatus","onClick","TodoItem","deleteToDo","display","flexDirection","justifyContent","component_TodoItemStatus","component_TodoItemContent","Todo","component_TodoItem","TodoList","todos","map","todo","component_Todo","TodoStatus","filter","length","App","state","storage","getData","localStorage","getItem","_this","setState","JSON","parse","saveStorage","setItem","stringify","handleAddToDo","Object","toConsumableArray","uuid","data","objectSpread","checkAll","deleteAll","this","_this2","component_TodoStatus","type","_ref3$target","defineProperty","component_TodoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37fcf91c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TodoItemContent =  ({ item: { edit, name, status, id }, updateToDo }) => {\n  return (\n    <React.Fragment>\n      {edit ? (\n        <input\n          value={name}\n          onChange={({ target: { value } }) => updateToDo({ id, name: value })}\n          onBlur={() => updateToDo({ id, name, edit: !edit })}\n          onKeyPress={({ key }) =>\n            key === \"Enter\" ? updateToDo({ id, edit: !edit }) : \"\"\n          }\n          autoFocus\n        />\n      ) : (\n        <span\n          style={{ textDecorationLine: status ? \"line-through\" : \"none\" }}\n          className={`${edit ? \"d-none\" : \"d-block\"}`}\n          onDoubleClick={() => updateToDo({ id, edit: !edit })}\n        >\n          {name}\n        </span>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default TodoItemContent","import React from \"react\";\n\nconst TodoItemStatus =  ({ item: { status, id }, updateToDo }) => (\n  <i\n    className=\"material-icons\"\n    onClick={() => updateToDo({ id, status: !status })}\n  >\n    {status ? \"check_box\" : \"check_box_outline_blank\"}\n  </i>\n);\n\nexport default TodoItemStatus\n","import React from \"react\";\nimport TodoItemContent from \"./TodoItemContent\";\nimport TodoItemStatus from \"./TodoItemStatus\";\n\nconst TodoItem =  ({ item, deleteToDo, updateToDo }) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-between\"\n    }}\n  >\n    <TodoItemStatus updateToDo={updateToDo} item={item} />\n    <TodoItemContent item={item} updateToDo={updateToDo} />\n    <i className=\"material-icons\" onClick={() => deleteToDo({ id: item.id })}>\n      delete\n    </i>\n  </div>\n);\n\nexport default TodoItem\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nconst Todo = ({ item, updateToDo, deleteToDo }) => {\n  return (\n    <TodoItem item={item} updateToDo={updateToDo} deleteToDo={deleteToDo} />\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./Todo\";\n\nconst TodoList =  ({ todos, updateToDo, deleteToDo }) => {\n  const todo = todos.map(todo => (\n    <Todo\n      key={todo.id}\n      item={todo}\n      updateToDo={updateToDo}\n      deleteToDo={deleteToDo}\n    />\n  ));\n\n  return todo;\n};\n\nexport default TodoList","import React from \"react\";\n\nconst TodoStatus = ({ todos }) => (\n  <div className=\"d-flex justify-content-between mb-2\">\n    <span>complete :</span> {todos.filter(item => item.status === true).length}\n    <span>active :</span> {todos.filter(item => item.status !== true).length}\n  </div>\n);\n\nexport default TodoStatus;\n","import React, { Component } from \"react\";\nimport uuid from \"uuid/v1\";\nimport TodoList from \"./component/TodoList\";\nimport TodoStatus from \"./component/TodoStatus\";\nimport './App.scss'\n\nclass App extends Component {\n  state = {\n    todo: \"\",\n    todos: [],\n    status: false\n  };\n\n  componentDidMount() {\n    this.storage();\n  }\n\n  storage = () => {\n    const getData = localStorage.getItem(\"todo\");\n    return getData ? this.setState({ todos: JSON.parse(getData) }) : \"\";\n  };\n\n  saveStorage = item => {\n    localStorage.setItem(\"todo\", JSON.stringify(item));\n  };\n\n  handleAddToDo = ({ key }) => {\n    if (key === \"Enter\" && this.state.todo) {\n      this.setState(state => {\n        const item = [\n          ...state.todos,\n          { id: uuid(), name: state.todo, status: false, edit: false }\n        ];\n\n        this.saveStorage(item);\n        return {\n          todos: item,\n          todo: \"\"\n        };\n      });\n    }\n  };\n\n  updateToDo = item => {\n    this.setState(state => {\n      const data = state.todos.map(todo => {\n        return todo.id === item.id\n          ? {\n              ...todo,\n              ...item\n            }\n          : todo;\n      });\n\n      this.saveStorage(data);\n      return {\n        todos: data\n      };\n    });\n  };\n\n  deleteToDo = ({ id }) => {\n    this.setState(state => {\n      const item = state.todos.filter(todo => todo.id !== id);\n      this.saveStorage(item);\n      return {\n        todos: item\n      };\n    });\n  };\n\n  checkAll = () => {\n    this.setState(state => {\n      const todos = state.todos.map(todo => ({\n        ...todo,\n        status: !state.status\n      }));\n\n      this.saveStorage(todos);\n      return {\n        status: !state.status,\n        todos\n      };\n    });\n  };\n\n  deleteAll = () => {\n    this.setState(state => {\n      const todos = state.todos.filter(todo => todo.status !== true);\n\n      this.saveStorage(todos);\n      return {\n        todos,\n        status: false\n      };\n    });\n  };\n  render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"row\"\n        }}\n      >\n      \n        <div className=\"mt-5 col-md-4 col-lg-4 col-sm-12\">\n          <TodoStatus todos={this.state.todos} />\n\n          <input\n            type=\"text\"\n            name=\"todo\"\n            value={this.state.todo}\n            onChange={({ target: { name, value } }) =>\n              this.setState({ [name]: value })\n            }\n            onKeyPress={this.handleAddToDo}\n            className=\"form-control mb-3\"\n          />\n\n          <div\n            className={`${\n              this.state.todos.length > 0 ? \"d-flex\" : \"d-none\"\n            } justify-content-between mb-3`}\n          >\n            <div className=\"d-flex align-items-center flex-column\">\n              <i className=\"material-icons\" onClick={this.checkAll}>\n                {this.state.status ? \"check_box\" : \"check_box_outline_blank\"}\n              </i>\n              checkAll\n            </div>\n            <h3> Todo </h3>\n            <div className=\"d-flex align-items-center flex-column\">\n              <i className=\"material-icons \" onClick={() => this.deleteAll()}>\n                delete\n              </i>\n              <span>deleteAll</span>\n            </div>\n          </div>\n\n          <TodoList\n            todos={this.state.todos}\n            updateToDo={this.updateToDo}\n            deleteToDo={this.deleteToDo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}